/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: UserActivity
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import LogUnifyLogger, { LogUnifyEvent } from "@logunify/node-sdk";
//@@protoc_insertion_point(additional_imports)
export enum Event {
    IMPRESSION = 1,
    CLICK = 2
}
export enum Surface {
    SCREEN_1 = 1,
    SCREEN_2 = 2,
    TOP_NAV = 3,
    OPTIONS_MENU = 4,
    BOTTOM_FAB = 5
}
export enum ButtonType {
    NEXT = 1,
    PREVIOUS = 2,
    FAB = 3,
    OPTIONS = 4,
    SETTINGS = 5
}
export class UserActivity extends pb_1.Message implements 
LogUnifyEvent
//@@protoc_insertion_point(class_implements:UserActivity)
 {
    #one_of_decls: number[][] = [];
    getSchemaName(): string{
        return "UserActivity";
    }
    getProjectName(): string {
        return "TestProject";
    }
    log(): void {
        LogUnifyLogger.get().log(this);
    }
    //@@protoc_insertion_point(class_scope:UserActivity)
    constructor(data?: any[] | {
        user_id?: string;
        surface?: Surface;
        button_type?: ButtonType;
        event?: Event;
        session_id?: string;
        string_array: string[];
        int_array: number[];
        string_int_map: Map<string, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("surface" in data && data.surface != undefined) {
                this.surface = data.surface;
            }
            if ("button_type" in data && data.button_type != undefined) {
                this.button_type = data.button_type;
            }
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
            if ("session_id" in data && data.session_id != undefined) {
                this.session_id = data.session_id;
            }
            this.string_array = data.string_array;
            this.int_array = data.int_array;
            this.string_int_map = data.string_int_map;
        }
        if (!this.string_int_map)
            this.string_int_map = new Map();
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_user_id() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get surface() {
        return pb_1.Message.getFieldWithDefault(this, 2, Surface.SCREEN_1) as Surface;
    }
    set surface(value: Surface) {
        pb_1.Message.setField(this, 2, value);
    }
    get has_surface() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get button_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, ButtonType.NEXT) as ButtonType;
    }
    set button_type(value: ButtonType) {
        pb_1.Message.setField(this, 3, value);
    }
    get has_button_type() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get event() {
        return pb_1.Message.getFieldWithDefault(this, 4, Event.IMPRESSION) as Event;
    }
    set event(value: Event) {
        pb_1.Message.setField(this, 4, value);
    }
    get has_event() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get session_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set session_id(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get has_session_id() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get string_array() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
    }
    set string_array(value: string[]) {
        pb_1.Message.setField(this, 6, value);
    }
    get int_array() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set int_array(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get string_int_map() {
        return pb_1.Message.getField(this, 8) as any as Map<string, number>;
    }
    set string_int_map(value: Map<string, number>) {
        pb_1.Message.setField(this, 8, value as any);
    }
    static fromObject(data: {
        user_id?: string;
        surface?: Surface;
        button_type?: ButtonType;
        event?: Event;
        session_id?: string;
        string_array: string[];
        int_array: number[];
        string_int_map: {
            [key: string]: number;
        };
    }): UserActivity {
        const message = new UserActivity({
            string_array: data.string_array,
            int_array: data.int_array,
            string_int_map: new Map(Object.entries(data.string_int_map))
        });
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.surface != null) {
            message.surface = data.surface;
        }
        if (data.button_type != null) {
            message.button_type = data.button_type;
        }
        if (data.event != null) {
            message.event = data.event;
        }
        if (data.session_id != null) {
            message.session_id = data.session_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            surface?: Surface;
            button_type?: ButtonType;
            event?: Event;
            session_id?: string;
            string_array: string[];
            int_array: number[];
            string_int_map: {
                [key: string]: number;
            };
        } = {
            string_array: this.string_array,
            int_array: this.int_array,
            string_int_map: (Object.fromEntries)(this.string_int_map)
        };
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.surface != null) {
            data.surface = this.surface;
        }
        if (this.button_type != null) {
            data.button_type = this.button_type;
        }
        if (this.event != null) {
            data.event = this.event;
        }
        if (this.session_id != null) {
            data.session_id = this.session_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user_id && this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.has_surface)
            writer.writeEnum(2, this.surface);
        if (this.has_button_type)
            writer.writeEnum(3, this.button_type);
        if (this.has_event)
            writer.writeEnum(4, this.event);
        if (this.has_session_id && this.session_id.length)
            writer.writeString(5, this.session_id);
        if (this.string_array.length)
            writer.writeRepeatedString(6, this.string_array);
        if (this.int_array.length)
            writer.writeRepeatedInt32(7, this.int_array);
        for (const [key, value] of this.string_int_map) {
            writer.writeMessage(8, this.string_int_map, () => {
                writer.writeString(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserActivity {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserActivity();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.surface = reader.readEnum();
                    break;
                case 3:
                    message.button_type = reader.readEnum();
                    break;
                case 4:
                    message.event = reader.readEnum();
                    break;
                case 5:
                    message.session_id = reader.readString();
                    break;
                case 6:
                    pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                    break;
                case 7:
                    pb_1.Message.addToRepeatedField(message, 7, reader.readInt32());
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.string_int_map as any, reader, reader.readString, reader.readInt32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserActivity {
        return UserActivity.deserialize(bytes);
    }
}
